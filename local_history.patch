Index: game/actors/ActorSlime.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- game/actors/ActorSlime.py	(revision )
+++ game/actors/ActorSlime.py	(revision )
@@ -14,11 +14,12 @@
 from game.actors.ActorArrowSlime import ActorArrowSlime
 from game.utils.SurfaceHelper import load_image
 from game.utils.Vector import Vector
+from game.actors.ActorDoor import ActorDoor, ActorDoorWin
 
 
 class ActorSlime(ActorAnimation):
     """ Un ennemi (slime en l'occurence) qui a plusieurs animations selon qu'il soit imobile, attaquant , mourant ou en déplacement"""
-    
+
     ID = 32
     NAME = "SLIME"
 
@@ -31,7 +32,7 @@
 
     WIDTH = 128
     HEIGHT = 128
-    FILE = "assets/slime_blue_128.png"
+    FILE = "assets/slime_green_128.png"
 
     def __init__(self):
         super().__init__()
@@ -75,16 +76,16 @@
         self.jump_range = 700
         self.jump_cd = 0
         self.jump_cd_max = 400
-        self.jump_theta = 0
+        self.jump_theta = 0 #angle définissant le jump
         self.jump_in = True
         self.jump_count = 0
         self.jump_count_max = 30
         self.jump_initial_pos = None
-        self.jump_velocity = 12
+        self.jump_velocity = 12     #vitesse du saut
         self.theta = 0
         self.ammo_max = 3  # Le nombre de balles
         self.ammo = self.ammo_max  # Le nombre de balles max
-        self.hp = 3
+        self.hp = 3     #nombre de tirs nécéssaires pout mourir 
 
         self.move_cd = 0
         self.move_cd_max = 125
@@ -206,6 +207,17 @@
         self.state = ActorSlime.State.DIE
 
     def dead(self):
+        nb_slime = 0
+        
+        for actor in self.map.actors:
+            if isinstance(actor, ActorSlime):
+                nb_slime += 1
+        
+        if nb_slime == 1:
+            for actor in self.map.actors:
+                if isinstance(actor, ActorDoor) or isinstance(actor, ActorDoorWin):
+                    actor.open()
+        
         self.map.remove_actor(self)
         del self
 
@@ -224,20 +236,23 @@
     def load_sprite(self):
         super().load_sprite()
 
-        sprite_sheet = load_image(ActorSlime.FILE, False)
+        sprite_sheet = load_image(type(self).FILE, False)
+        width = type(self).WIDTH
+        height = type(self).HEIGHT
 
         self.animations = {}
-        self.animations[ActorSlime.State.IDLE] = Animation(sprite_sheet, pygame.Rect(0, 0, ActorSlime.WIDTH, ActorSlime.HEIGHT),
+        self.animations[ActorSlime.State.IDLE] = Animation(sprite_sheet, pygame.Rect(0, 0, width, height),
                                                            9, 50 , True)
         self.animations[ActorSlime.State.MOVE] = Animation(sprite_sheet,
-                                                           pygame.Rect(0, 128, ActorSlime.WIDTH, ActorSlime.HEIGHT), 9, 100, True)
+                                                           pygame.Rect(0, height, width, height), 9, 100, True)
         self.animations[ActorSlime.State.JUMP] = Animation(sprite_sheet,
-                                                           pygame.Rect(0, 256, ActorSlime.WIDTH, ActorSlime.HEIGHT), 9, 50, True)
+                                                           pygame.Rect(0, height * 2, width, height), 9, 50, True)
         self.animations[ActorSlime.State.ATTACK] = Animation(sprite_sheet,
-                                                             pygame.Rect(0, 384, ActorSlime.WIDTH, ActorSlime.HEIGHT), 9, 50, True,
+                                                             pygame.Rect(0, height * 3, width, height), 9, 50, True,
                                                              callback_fun=self.idle)
-        self.animations[ActorSlime.State.DIE] = Animation(sprite_sheet, pygame.Rect(0, 512, ActorSlime.WIDTH, ActorSlime.HEIGHT),
+        self.animations[ActorSlime.State.DIE] = Animation(sprite_sheet, pygame.Rect(0, height * 4, width, height),
                                                           9, 50, True, callback_fun=self.dead)
+        pass
 
     @property
     def animation(self):
